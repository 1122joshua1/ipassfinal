/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.


*/

#include<array>
#include "hwlib.hpp"
#include "library.hpp"

/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.


*/








	bool moving::operator==(const int &rhs){
	return startdres==rhs;
	}


void moving::nextelement(){
	if(currel<9){
		currel +=1;
	}
	else{
	currel =0;
	}
hwlib::wait_ms(3);
}
void moving::changecur(int waarde){if(currel <9){adressen[currel]=waarde;} else if(currel ==1){waardes[1] = waarde;} else{waardes[2] = waarde;}}


void moving::sendstream(int pan, int tilt, int color, int dim){
adressen[0]= pan;
adressen[1]= tilt;
adressen[2]= color;
adressen[5]= dim;
}
void moving::strobestart(){
adressen[4]=100;

}
void moving::strobestop(){
adressen[4]=10;
}











void dmx512::usart_init(){
	   static bool init_done = false;
	   if( init_done ){
	      return;
	   }
	   init_done = true;

	    // enable the clock to port A
	    PMC->PMC_PCER0 = 1 << ID_PIOA;
		
	    // disable PIO Control on PA10 and PA11 and set up for Peripheral A
		PIOA->PIO_PDR   = PIO_PA10; 
		PIOA->PIO_ABSR &= ~PIO_PA10; 
		PIOA->PIO_PDR   = PIO_PA11; 
		PIOA->PIO_ABSR &= ~PIO_PA11; 

		// enable the clock to the USART
	    PMC->PMC_PCER0 = ( 0x01 << ID_USART0 );

	    // Reset and disable receiver and transmitter.
	    hw_usart->US_CR = US_CR_RSTRX | US_CR_RSTTX | US_CR_RXDIS | US_CR_TXDIS;

	    // Set the baudrate to 250 000.

	    hw_usart->US_BRGR = 21; 

	    // No parity, normal channel mode.
	    hw_usart->US_MR = US_MR_PAR_NO | US_MR_NBSTOP_2_BIT | US_MR_CHRL_8_BIT ;

	    // Disable all interrupts.	  
	    hw_usart->US_IDR = 0xFFFFFFFF;   

	    // Enable the receiver and the trasmitter.
	    hw_usart->US_CR = US_CR_RXEN | US_CR_TXEN;      
	}

	bool dmx512::usart_char_available(){
	   usart_init();	
	   return ( hw_usart->US_CSR & 1 ) != 0;
	}

	char dmx512::usart_getc(){
	   // uart_init() is not needed because uart_char_available does that
	   while( ! usart_char_available() ){}
	   return hw_usart->US_RHR; 
	}

	void dmx512::dmx_putc( char c ){
	      
	   //usart_init();	
	   while( ( hw_usart->US_CSR & 2 ) == 0 ){}
	   hw_usart->US_THR = c;

	}
	void dmx512::dmx_break(int waittime){
	   usart_init();	
	   hw_usart->US_CR = US_CR_STTBRK;
	   hwlib::wait_us(waittime);
	   hw_usart->US_CR = US_CR_STPBRK;
	}
	void dmx512::dmx_startbyte(){
		dmx_break(176);
		hwlib::wait_us(100);
		dmx_putc(0); //startbyte=10
		hwlib::wait_us(50);
	}
	void dmx512::dmx_sendbyte(char c){
		hwlib::wait_us(50);
		dmx_putc(c);
	}


	
	dmx512::dmx512(bool mode):mode(mode){
		usart_init();
		for(int i=0; i<512; i++){patch[i] =0;}
	}
	void dmx512::senddata(std::array<int, 512> data, int grootte){
		


			
			if (grootte<513 && grootte>80){
				dmx_break(176);
				dmx_startbyte();	
				for(int i=0; i<grootte; i++){
				if(patch[i] <0 || patch[i] >4){

					dmx_sendbyte(data[i]);
					}
				else{
					for(int k=0; k<fixtures[patch[i]].lengte; k++){

						dmx_sendbyte(fixtures[patch[i]].adressen[k]);
					}
					i+=9;
				}

				}//for
			}//if
			else if(grootte<513){
				dmx_break(176);
				dmx_startbyte();	
			
				for(int i=0; i<grootte; i++){
				if(patch[i]==0){
					//hwlib::wait_us(50);
					//dmx_putc(data[i]);
					dmx_sendbyte(data[i]);
					//hwlib::cout<<i<<"     "<<data[i]<<'\n';
					}
				else{
					for(int k=0; k<fixtures[patch[i]].lengte; k++){
						
						//hwlib::wait_us(50);
						//dmx_putc(fixtures[patch[i]].adressen[k]);
						dmx_sendbyte(fixtures[patch[i]].adressen[k]);
						//hwlib::cout<<i<<"   "<<i+k<<"   "<<fixtures[patch[i]].adressen[k]<<'\n';
					}
					i+=9;
				}
				}

				for(int i=0; i<80-grootte; i++){
				//hwlib::cout<<i<<"   "<<patch[i]<<'\n';				
				if(patch[i]==0){
					//hwlib::cout<<i<<"     "<<0<<'\n';
					//hwlib::wait_us(50);
					//dmx_putc(0);
					dmx_sendbyte(0);
					}
				else{
					for(int k=0; k<fixtures[patch[i]].lengte; k++){
						//hwlib::cout<<i<<"   "<<i+k<<"   "<<fixtures[patch[i]].adressen[k]<<'\n';
						///hwlib::wait_us(50);
						//dmx_putc(fixtures[patch[i]].adressen[k]);
						dmx_sendbyte(fixtures[patch[i]].adressen[k]);
					}
					i+=9;
				}

				}//for
				
		}//elif

	
}//fun


	void dmx512::fixtureout(){
				
				dmx_startbyte();
					
			
				for(int i=0; i<80; i++){

				if(patch[i]==0){

					dmx_sendbyte(0);

					}
				else{
					for(int k=0; k<fixtures[patch[i]].lengte; k++){
						

						dmx_sendbyte(fixtures[patch[i]].adressen[k]);

					}
					i+=8;
				}
				}



}
	int dmx512::addtopatch(moving lamp, int start){
		nfix+=1;
		patch[start-1] = nfix;
		fixtures[nfix] = lamp;
		return nfix;
	
}
	void dmx512::updatefixture(moving lamp, int number){
		

		fixtures[number] = lamp;
		

	
}























